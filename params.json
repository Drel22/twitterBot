{
  "name": "C# TwitterBot with RPC controlled Mbed",
  "tagline": "",
  "body": "# Project Description\r\nThis project consists of a C# GUI application to query tweets from a specific account and control peripherals using Remote Procedure Calls (RPC) on an mbed. The application allows users to acquire tweets by username and store them in a Microsoft Excel spreadsheet on the local machine. RPC functions are used to print tweets selected in the GUI to an LCD and control status LEDs connected to the mbed.\r\n\r\n# Demo\r\nHere's a short [demo video](http://youtube.com) of the usage and functionality of the application\r\n\r\n\r\n\r\n## Used Hardware\r\n* [mbed LPC1768](https://os.mbed.com/platforms/mbed-LPC1768/) \r\n* [RGB LED](https://www.sparkfun.com/products/105)\r\n* 100 Ohm Resistors (3)\r\n* [uLCD-144-G2 128 by 128 Smart Color LCD](https://os.mbed.com/users/4180_1/notebook/ulcd-144-g2-128-by-128-color-lcd/)\r\n\r\n\r\n<div align=\"center\"><img src=\"https://github.gatech.edu/njack7/twitterBot/blob/master/mbed%20hardware.jpg?raw=true\" alt=\"Hardware Setup\" width=\"493\" height=\"657\"></img></div>\r\n\r\n## Writing RPC functions for the mbed\r\nRPC functions are objects that wrap functions that can be executed on the mbed through RPC. Below is the code that enables the mbed to listen for and execute instructions passed to it from the C# application. Click on [this link](https://os.mbed.com/teams/ECE-4180-Spring-18/code/rpc_mbedECE4180Project/) to access the repository containing the mbed portion of the project. This [tutorial](https://os.mbed.com/users/nambvarun/notebook/rpc-tutorial/) contains more information about the RPC library used in our code.\r\n\r\n```C++\r\n#include \"mbed.h\"\r\n#include \"mbed_rpc.h\"\r\n#include \"uLCD_4DGL.h\"\r\n#include <ctype.h>\r\n#include \"RGB_LED.h\"\r\n \r\n//Use the RPC enabled wrapped class  - see RpcClasses.h for more info\r\nSerial pc(USBTX, USBRX);\r\nPinName tx, rx, rst;\r\nRGBLed myRGBled(p22,p23,p24);\r\nuLCD_4DGL uLCD(p28, p27, p29);\r\nchar text;\r\n//string screen;\r\n \r\nvoid clearLCD(Arguments *in, Reply *out);\r\nRPCFunction rpcClear(&clearLCD, \"clearLCD\");\r\n \r\nvoid printLCDAndLightRGB(Arguments *in, Reply *out);\r\nRPCFunction rpcPrintLCDAndLightRGB(&printLCDAndLightRGB, \"printLCDAndLightRGB\");\r\n  \r\nint main() {\r\n \r\n    char buf[256], outbuf[256];\r\n    while(1) {\r\n        pc.gets(buf, 256);\r\n        //Call the static call method on the RPC class\r\n        RPC::call(buf, outbuf); \r\n        pc.printf(\"%s\\n\", outbuf);\r\n    }\r\n}\r\n \r\nvoid clearLCD(Arguments *in, Reply *out)\r\n{\r\n    uLCD.cls();\r\n}\r\n \r\nvoid printLCDAndLightRGB(Arguments *in, Reply *out)\r\n{\r\n        uLCD.cls();\r\n        char * text = in->getArg<char *>();\r\n        int value = strlen(text);\r\n        if(text[0] == '1'){\r\n          myRGBled.write(0,1.0f,0);\r\n          uLCD.printf(\"Tweet is found!\\n\");\r\n          uLCD.printf(\"\\n\");\r\n        } else if(text[0] == '0'){\r\n          myRGBled.write(0,0,1.0f);\r\n        }\r\n        text[0] = '-';\r\n        for(int i = 0; i< value; i++) {\r\n            if(text[i] == '|') {\r\n               text[i] = ' ';   \r\n            }\r\n        }\r\n        uLCD.printf(text);\r\n }\r\n```\r\n\r\n***\r\n\r\n## Creating the C# GUI Application\r\n### Step 1: Download the Visual Studio Solution Files\r\nDownload the solution files provided [here](https://github.gatech.edu/njack7/twitterBot/blob/master/CSharp%20TwitterBot.zip), unzip, and open them in Visual Studio. Make sure to have .NET Framework 4.0 or higher installed.\r\n\r\n### Step 2: Adding TweetinviAPI to Visual Studio Project\r\nTweetinvi is already included in the Solution Files for this project. However, if you want to add the TweetinviAPI (or any other package) to your own project\r\n1. Open the Solution Explorer\r\n2. Right Click on 'References'\r\n3. Click 'Manage NuGet Packages'\r\n4. Under 'Browse' search Tweetinvi\r\n5. Install\r\n\r\n### Step 3: Twitter Account and OAuth Credentials\r\nTwitter applications require special credentials to make API calls and Twitter warns developers that these keys \"should never be human-readable in your application\" and \"Do not share your access token secret with anyone.\" Our credentials aren't included in the source code that we've provided. Below is a few lines of code from the 'App.config' file where a user can place their own unique credentials.\r\n```C#\r\n...\r\n<configuration>\r\n    <appSettings>\r\n      <add key=\"cKey\" value=\"your_cred\" />\r\n      <add key=\"cSecret\" value=\"your_cred\" />\r\n      <add key=\"aKey\" value=\"your_cred\"/>\r\n      <add key=\"aSecret\" value =\"your_cred\"/>\r\n    </appSettings>\r\n...\r\n```\r\n\r\nHead to [Twitter](https://apps.twitter.com/) to create an application and generate the credentials to replace the lines containing \"your_cred\" in the App.config file. Visit the 'Keys and Access Tokens' tab to get the Consumer Key, Consumer Secret, Access Token, and Access Token Secret.\r\nThese lines of code below in the source code for the Windows Form Authenticate the application\r\n```C#\r\nstring ckey = ConfigurationManager.AppSettings[\"cKey\"];\r\nstring cSecret = ConfigurationManager.AppSettings[\"cSecret\"];\r\nstring aKey = ConfigurationManager.AppSettings[\"aKey\"];\r\nstring aSecret = ConfigurationManager.AppSettings[\"aSecret\"];\r\n\r\nAuth.SetUserCredentials(ckey,cSecret,aKey,aSecret);\r\n```\r\n\r\n### Step 4: Choose Path for spreadsheet\r\nChange line 84 in the 'Form1.cs' source file and replace \"YourDirectory\" with the preferred location for the Microsoft Excel spreadsheet that will store the queried tweets.\r\n```C#\r\nxlWorkBook.SaveAs(@\"YourDirectory\" + targetAccount + \"_Report.xls\", Excel.XlFileFormat.xlWorkbookNormal);\r\nxlWorkBook.Close();\r\nxlApp.Quit();\r\n```\r\n\r\n### Step 5: Build and run\r\nBuild the solution and run the application. Start searching for tweets!\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}